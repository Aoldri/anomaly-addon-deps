-- Might want to extend this to track flags based on IDs since detectors have animations too
-- Likely overkill unless someone implements custom anims for them
FLAGS = {}

local active_flags = {}

-- Export: Flags
function get_flag(flag)
    return active_flags[flag]
end

function set_flag(flag)
    active_flags[flag] = true
end

function remove_flag(flag)
    active_flags[flag] = nil
end

function add_flag(flag)
    -- Exit early if it already exists
    if FLAGS[flag] then return end
    FLAGS[flag] = #FLAGS
end

local anim_mutators = {}

-- Export: Animation Mutators
function add_anim_mutator(functor, priority)
    -- Add mutator func to list of mutators
    table.insert(anim_mutators, {functor=functor, priority=priority})
    
    -- Sort anim_mutators again
    table.sort(anim_mutators, function(a,b) return a.priority < b.priority end)
end

function has_animation(section, anm)
    local hud_section = ini_sys:r_string_ex(section,"hud")
    return SYS_GetParam(0, hud_section, anm)
end

function mutate_anim(anm_table, new_anm, section)
    if has_animation(section, new_anm) then
        anm_table.anm_name = new_anm
        return true
    end
    return false
end

function get_sound_from_anm(anm_name) -- TODO: allow sound volume to be defined in config
    return anm_name:gsub("anm_", "scripted_snd_")
end

-- Probably worth adding an ordered list of functions with conditions that can mutate anm_table
-- and use this script as source of truth for about-to-be-played animations since callback order is random between scripts
function actor_on_hud_animation_play(anm_table, item)
	if not item then return end
    local section = item:section()

    -- Execute each mutator functor in turn, ordered by priority
    for i, mutator in ipairs(anim_mutators) do
        mutator.functor(anm_table, item)
    end

    -- Animation (No Mutation): Clear all flags if holstering weapon
    if anm_table.anm_name == "anm_hide" or anm_table.anm_name == "anm_hide_empty" then
        active_flags = {}
    end

    -- Sound: Check if weapon has a valid scripted sound in config
    local anm_name = anm_table.anm_name

    local snd_name = get_sound_from_anm(anm_name)

	local snd_path = SYS_GetParam(0, section, snd_name)

    if not snd_path then return end

    -- Play sound
    local snd_obj = xr_sound.get_safe_sound_object( snd_path )
	if not snd_obj then return end

    snd_obj:play_no_feedback(db.actor, sound_object.s2d, 0, vector(), 1.0, 1.0)
end

function on_game_start()
	RegisterScriptCallback("actor_on_hud_animation_play",actor_on_hud_animation_play)
end 
